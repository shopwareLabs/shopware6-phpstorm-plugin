# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [main]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3.3.0

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3.3.0

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          IDE_VERSIONS="$(echo "$PROPERTIES" | grep "^pluginVerifierIdeVersions:" | base64)"

          echo "::set-output name=ideVersions::$IDE_VERSIONS"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3.2.6
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: ${{ runner.os }}-plugin-verifier-${{ steps.properties.outputs.ideVersions }}

      #      # Run Qodana inspections
      #      - name: Qodana - Code Inspection
      #        uses: JetBrains/qodana-action@v2.1-eap
      #
      # Run tests
      - name: Run Tests
        run: ./gradlew test

      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

      # Run IntelliJ Plugin Verifier action using GitHub Action
      - name: Run Plugin Verifier
        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3.3.0

      # Setup Java 17 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "::set-output name=filename::$FILENAME"

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*